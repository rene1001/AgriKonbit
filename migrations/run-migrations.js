const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', 'server', '.env') });

async function runMigrations() {
  const connection = await mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'agrikonbit',
    multipleStatements: true
  });

  try {
    console.log('üîÑ Connexion √† la base de donn√©es...');
    
    // Lire tous les fichiers SQL dans le dossier migrations
    const files = await fs.readdir(__dirname);
    const sqlFiles = files
      .filter(f => f.endsWith('.sql'))
      .sort(); // Trier par ordre alphab√©tique (donc num√©rique)

    console.log(`üìÅ ${sqlFiles.length} fichiers de migration trouv√©s\n`);

    for (const file of sqlFiles) {
      console.log(`‚è≥ Ex√©cution de ${file}...`);
      const filePath = path.join(__dirname, file);
      const sql = await fs.readFile(filePath, 'utf8');
      
      try {
        await connection.query(sql);
        console.log(`‚úÖ ${file} - Succ√®s\n`);
      } catch (error) {
        console.error(`‚ùå ${file} - Erreur:`, error.message);
        // Continuer avec les autres migrations
      }
    }

    console.log('‚úÖ Toutes les migrations ont √©t√© ex√©cut√©es !');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des migrations:', error);
  } finally {
    await connection.end();
  }
}

runMigrations();
